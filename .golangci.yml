run:
  concurrency: 4
  timeout: 5m
  issues-exit-code: 2
  tests: false
  modules-download-mode: readonly
  allow-parallel-runners: true
  allow-serial-runners: true
issues:
  exclude-dirs:
    - ".*/get/go"
    - ".*/mocks"
    - "/vendor"
    - ".*/slogpretty"
  exclude-rules:
    - path: "cmd/arevbond/main.go" # your main file example: cmd/post/main.go
      linters:
        - funlen
        - gochecknoglobals
        - cyclop
linters-settings:
  varnamelen:
    ignore-decls:
      - d *xml.Decoder
    ignore-names:
      - tx
      - r
      - w
      - db
      - mg
      - p
  exhaustive:
    default-signifies-exhaustive: true
  tagliatelle:
    case:
      rules:
        json: snake
        mapstructure: snake
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - errors.Join(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - status.Error(
  revive:
    rules:
      - name: exported
        disabled: true
  nolintlint:
    allow-unused: true
linters:
  enable:
    - asasalint    # Check for pass []any as any in variadic func(...any).
    - asciicheck    # Checks that all code identifiers does not have non-ASCII symbols in the name.
    - bidichk   # Checks for dangerous unicode character sequences.
    - bodyclose   # Checks whether HTTP response body is closed successfully.
    - canonicalheader   # Canonicalheader checks whether net/http.Header uses canonical header.
    - containedctx    # Containedctx is a linter that detects struct contained context.Context field.
    - contextcheck    # Check whether the function uses a non-inherited context.
    - copyloopvar   # A linter detects places where loop variables are copied.
    - cyclop    # Checks function and package cyclomatic complexity.
    - decorder    # Check declaration order and count of types, constants, variables and functions.
    - dogsled   # Checks assignments with too many blank identifiers (e.g. x, , , _, := f()).
    - dupl    # Tool for code clone detection.
    - dupword   # Checks for duplicate words in the source code.
    - durationcheck   # Check for two durations multiplied together.
    - err113    # Go linter to check the errors handling expressions.
    - errcheck    # Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.
    - errchkjson    # Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.
    - errname   # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint   # Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive    # Check exhaustiveness of enum switch statements.
    - exhaustruct   # Checks if all structure fields are initialized.
    - exptostd    # Detects functions from golang.org/x/exp/ that can be replaced by std functions.
    - fatcontext    # Detects nested contexts in loops and function literals.
    - forbidigo   # Forbids identifiers.
    - forcetypeassert   # Finds forced type assertions.
    - funlen    # Checks for long functions.
    - gci   # Checks if code and import statements are formatted, with additional rules.
    - ginkgolinter    # Enforces standards of using ginkgo and gomega.
    - gocheckcompilerdirectives   # Checks that go compiler directive comments (//go:) are valid.
    - gochecknoglobals    # Check that no global variables exist.
    - gochecknoinits    # Checks that no init functions are present in Go code.
    - gochecksumtype    # Run exhaustiveness checks on Go "sum types".
    - gocognit    # Computes and checks the cognitive complexity of functions.
    - goconst   # Finds repeated strings that could be replaced by a constant.
    - gocritic    # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo   # Computes and checks the cyclomatic complexity of functions.
    - godot   # Check if comments end in a period.
    - godox   # Detects usage of FIXME, TODO and other keywords inside comments.
    - gofmt   # Checks if the code is formatted according to 'gofmt' command.
    - goheader    # Checks if file header matches to pattern.
    - goimports   # Checks if the code and import statements are formatted according to the 'goimports' command.
    - gomoddirectives   # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard    # Allow and block list linter for direct Go module dependencies.
    - goprintffuncname    # Checks that printf-like functions are named with f at the end.
    - gosec   # Inspects source code for security problems.
    - gosimple    # Linter for Go source code that specializes in simplifying code.
    - gosmopolitan    # Report certain i18n/l10n anti-patterns in your Go codebase.
    - govet   # Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes.
    - grouper   # Analyze expression groups.
    - iface   # Detect the incorrect use of interfaces, helping developers avoid interface pollution.
    - importas    # Enforces consistent import aliases.
    - inamedparam   # Reports interfaces with unnamed method parameters.
    - ineffassign   # Detects when assignments to existing variables are not used.
    - interfacebloat    # A linter that checks the number of methods inside an interface.
    - lll     # Reports long lines.
    - loggercheck   # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - maintidx    # Maintidx measures the maintainability index of each function.
    - makezero    # Finds slice declarations with non-zero initial length.
    - mirror    # Reports wrong mirror patterns of bytes/strings usage.
    - misspell    # Finds commonly misspelled English words.
    - mnd     # An analyzer to detect magic numbers.
    - musttag   # Enforce field tags in (un)marshaled structs.
    - nakedret    # Checks that functions with naked returns are not longer than a maximum size (can be zero).
    - nestif    # Reports deeply nested if statements.
    - nilerr    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnesserr    # Reports constructs that checks for err != nil, but returns a different nil value error.
    - nilnil    # Checks that there is no simultaneous return of nil error and an invalid value.
    - nlreturn    # Nlreturn checks for a new line before return and branch statements to increase code clarity.
    - noctx   # Finds sending http request without context.Context.
    - nolintlint    # Reports ill-formed or insufficient nolint directives.
    - nonamedreturns    # Reports all named returns.
    - nosprintfhostport   # Checks for misuse of Sprintf to construct a host with port in a URL.
    - paralleltest    # Detects missing usage of t.Parallel() method in your Go test.
    - perfsprint    # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - prealloc    # Finds slice declarations that could potentially be pre-allocated.
    - predeclared   # Find code that shadows one of Go's predeclared identifiers.
    - promlinter    # Check Prometheus metrics naming via promlint.
    - protogetter   # Reports direct reads from proto message fields when getters should be used.
    - reassign    # Checks that package variables are not reassigned.
    - recvcheck   # Checks for receiver type consistency.
    - revive    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck    # Checks whether Rows.Err of rows is checked successfully.
    - sloglint    # Ensure consistent code style when using log/slog.
    - spancheck   # Checks for mistakes with OpenTelemetry/Census spans.
    - sqlclosecheck   # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.
    - staticcheck   # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary.
    - stylecheck    # Stylecheck is a replacement for golint.
    - tagalign    # Check that struct tags are well aligned.
    - tagliatelle   # Checks the struct tags.
    - testableexamples    # Linter checks if examples are testable (have an expected output).
    - testpackage   # Linter that makes you use a separate _test package.
    - testifylint   # Checks usage of github.com/stretchr/testify.
    - thelper   # Thelper detects tests helpers which is not start with t.Helper() method.
    - tparallel   # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.
    - unconvert   # Remove unnecessary type conversions.
    - unparam   # Reports unused function parameters.
    - usestdlibvars   # A linter that detect the possibility to use variables/constants from the Go standard library.
    - usetesting    # Reports uses of functions with replacement inside the testing package.
    - unconvert   # Remove unnecessary type conversions.
    - unparam   # 	Reports unused function parameters.
    - unused    # Checks Go code for unused constants, variables, functions and types.
    - varnamelen    # Checks that the length of a variable's name matches its scope.
    - wastedassign    # Finds wasted assignment statements.
    - whitespace    # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc.
    - wrapcheck   # Checks that errors returned from external packages are wrapped.
    - wsl   # Add or remove empty lines.
